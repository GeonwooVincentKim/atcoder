#include <bits/stdc++.h>
using namespace std;

long long y[] = {
	1, 8, 9, 10, 98, 99,
	100, 998, 999, 1000, 9998, 9999,
	10000, 99998, 99999, 100000, 999998, 999999,
	1000000, 9999998, 9999999, 10000000, 99999998, 99999999,
	100000000, 999999998, 999999999, 1000000000, 9999999998, 9999999999,
};
long long num_x[] = {
	1, 1, 10, 10, 1, 100,
	100, 1, 1000, 1000, 1, 10000,
	10000, 1, 100000, 100000, 1, 1000000,
	1000000, 1, 10000000, 10000000, 1, 100000000,
	100000000, 1, 1000000000, 1000000000, 1, 10000000000,
};
long long min_x[] = {
	1, 80, 90, 100, 9800, 9900,
	10000, 998000, 999000, 1000000, 99980000, 99990000,
	100000000, 9999800000, 9999900000, 10000000000, 999998000000, 999999000000,
	100000000000, 99999980000000, 99999990000000, 100000000000000, 9999999800000000, 9999999900000000,
	10000000000000000, 999999998000000000, 999999999000000000, 1000000000000000000
};

// floor(sqrt(n))
long long sqrtll(long long n) { 
    // 3037000500 = ceil(sqrt(2^63))
    long long le = 0, ri = 3037000500; 
    while(ri - le > 1) {
        long long mid = (le + ri) / 2;
        if(mid * mid <= n) le = mid;
        else ri = mid;
    }
    return le;
}

int main()
{
	long long T;
	cin >> T;
	for (int i = 0; i < T; i++)
	{
		long long N;
		cin >> N;
		auto it = lower_bound(y, y + 30, sqrtll(N));
		int idx = it - y;
		long long ans = 0;
		for (int i = 0; i < idx; i++)
			ans += num_x[i];
		// cout << "idx: " << idx << endl;
		ans += min(max(0LL, N - min_x[idx] + 1), num_x[idx]);
		cout << ans << endl;
	}
}